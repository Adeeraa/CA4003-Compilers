/* Generated By:JJTree&JavaCC: Do not edit this line. CALParser.java */
import java.util.*;
import java.io.*;

public class CALParser/*@bgen(jjtree)*/implements CALParserTreeConstants, CALParserConstants {/*@bgen(jjtree)*/
  protected static JJTCALParserState jjtree = new JJTCALParserState();
    public static STC ST = new STC();
    public static String scope = "global";

    public static void main(String[] args) {


        CALParser parser;
        if (args.length == 0) {
            System.out.println("Reading from standard input...");
            parser = new CALParser(System.in);
        } else if (args.length == 1) {
            try {
                parser = new CALParser(new java.io.FileInputStream(args[0]));
            } catch (java.io.FileNotFoundException e) {
                System.err.println("File " + args[0] + " not found.");

                return;
            }
        } else {
            System.out.println("CAL Parser: Usage is one of:");
            System.out.println("    java CALParser < inputfile");
            System.out.println("OR");
            System.out.println("    java CALParser inputfile");

            return;
        }

    try {
        //AST
        System.out.println("***ABSTRACT SYSTAX TREE***");
        SimpleNode root = parser.program();
        root.dump("");
        System.out.println("**************************");
        System.out.println();

        //SYMBOL TABLE
        System.out.println("******SYMBOL TABLE********");
        ST.printTable();
        System.out.println("**************************");
        System.out.println();

        //SEMANTIC ANALYSIS

        //3 ADDRESS CODE


    } catch (ParseException e) {
        System.out.println(e.getMessage());
        System.out.println("CAL Parser: Encountered errors during the parse.");
    }

    }

/***********************************
 ***** SECTION 4 - THE GRAMMAR *****
 ***********************************/

//my code
  static final public SimpleNode program() throws ParseException {
                             /*@bgen(jjtree) PROG */
  PROG jjtn000 = new PROG(JJTPROG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      decl_list();
      function_list();
      main();
      jj_consume_token(0);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
           {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void decl_list() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
    case CONST:
      decl();
      jj_consume_token(SEMIC);
      decl_list();
      break;
    default:
      jj_la1[0] = jj_gen;

    }
  }

  static final public void decl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      var_decl();
      break;
    case CONST:
      const_decl();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void var_decl() throws ParseException {
                            /*@bgen(jjtree) VARDECL */
                            VARDECL jjtn000 = new VARDECL(JJTVARDECL);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t; String id; String type;
    try {
      t = jj_consume_token(VAR);
      id = Identifier();
      jj_consume_token(COLON);
      type = type();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        jjtn000.value = t.image;
        ST.add(id, type, "var", scope);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void const_decl() throws ParseException {
                               /*@bgen(jjtree) CONSTDECL */
                               CONSTDECL jjtn000 = new CONSTDECL(JJTCONSTDECL);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);Token t; String id; String type;
    try {
      t = jj_consume_token(CONST);
      id = Identifier();
      jj_consume_token(COLON);
      type = type();
      jj_consume_token(ASSIGN);
      expression();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        jjtn000.value = t.image;
        ST.add(id, type, "const", scope);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void function_list() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case BOOL:
    case VOID:
      function();
      function_list();
      break;
    default:
      jj_la1[2] = jj_gen;

    }
  }

  static final public void function() throws ParseException {
                            /*@bgen(jjtree) FUNCTION */
                            FUNCTION jjtn000 = new FUNCTION(JJTFUNCTION);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t; String type; String id;
    try {
      type = type();
      id = Identifier();
                                     ST.add(id, type, "func", scope); scope = id;
      jj_consume_token(LPAREN);
      parameter_list();
      jj_consume_token(RPAREN);
      jj_consume_token(IS);
      decl_list();
      jj_consume_token(BEGIN);
      statement_block();
      jj_consume_token(RETURN);
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case MINUS:
      case NUMBER:
      case ID:
        expression();
        break;
      default:
        jj_la1[3] = jj_gen;

      }
      jj_consume_token(RPAREN);
                                                     RETURN jjtn001 = new RETURN(JJTRETURN);
                                                     boolean jjtc001 = true;
                                                     jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(SEMIC);
      } finally {
                                                     if (jjtc001) {
                                                       jjtree.closeNodeScope(jjtn001, true);
                                                     }
      }
      jj_consume_token(END);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public String type() throws ParseException {
                       /*@bgen(jjtree) TYPE */
                       TYPE jjtn000 = new TYPE(JJTTYPE);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        t = jj_consume_token(INT);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                 jjtn000.value = t.image; {if (true) return t.image;}
        break;
      case BOOL:
        t = jj_consume_token(BOOL);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                 jjtn000.value = t.image; {if (true) return t.image;}
        break;
      case VOID:
        t = jj_consume_token(VOID);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                 jjtn000.value = t.image; {if (true) return t.image;}
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void parameter_list() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      nemp_parameter_list();
      break;
    default:
      jj_la1[5] = jj_gen;

    }
  }

  static final public void nemp_parameter_list() throws ParseException {
                                     /*@bgen(jjtree) PARAM */
                                     PARAM jjtn000 = new PARAM(JJTPARAM);
                                     boolean jjtc000 = true;
                                     jjtree.openNodeScope(jjtn000);String id; String type;
    try {
      id = Identifier();
      jj_consume_token(COLON);
      type = type();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        nemp_parameter_list();
        break;
      default:
        jj_la1[6] = jj_gen;

      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        ST.add(id, type, "param", scope);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void main() throws ParseException {
                     /*@bgen(jjtree) MAIN */
                     MAIN jjtn000 = new MAIN(JJTMAIN);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);Token t;
    try {
     scope = "main";
      t = jj_consume_token(MAIN);
      jj_consume_token(BEGIN);
      decl_list();
      statement_block();
      jj_consume_token(END);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void statement_block() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case WHILE:
    case BEGIN:
    case SKP:
    case ID:
      statement();
      statement_block();
      break;
    default:
      jj_la1[7] = jj_gen;

    }
  }

  static final public void statement() throws ParseException {
                    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      Identifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        t = jj_consume_token(ASSIGN);
        expression();
        jj_consume_token(SEMIC);
                                                       ASSIGN jjtn001 = new ASSIGN(JJTASSIGN);
                                                       boolean jjtc001 = true;
                                                       jjtree.openNodeScope(jjtn001);
        try {
                                                       jjtree.closeNodeScope(jjtn001, true);
                                                       jjtc001 = false;
                                                      jjtn001.value = t.image;
        } finally {
                                                       if (jjtc001) {
                                                         jjtree.closeNodeScope(jjtn001, true);
                                                       }
        }
        break;
      case LPAREN:
        t = jj_consume_token(LPAREN);
        arg_list();
        jj_consume_token(RPAREN);
        jj_consume_token(SEMIC);
                                                              ASSIGN jjtn002 = new ASSIGN(JJTASSIGN);
                                                              boolean jjtc002 = true;
                                                              jjtree.openNodeScope(jjtn002);
        try {
                                                              jjtree.closeNodeScope(jjtn002, true);
                                                              jjtc002 = false;
                                                             jjtn002.value = t.image;
        } finally {
                                                              if (jjtc002) {
                                                                jjtree.closeNodeScope(jjtn002, true);
                                                              }
        }
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case BEGIN:
      jj_consume_token(BEGIN);
      statement_block();
      jj_consume_token(END);
      break;
    case IF:
      t = jj_consume_token(IF);
      condition();
      jj_consume_token(BEGIN);
      statement_block();
      jj_consume_token(END);
      jj_consume_token(ELSE);
      jj_consume_token(BEGIN);
      statement_block();
      jj_consume_token(END);
                                                                                                  STATMENT jjtn003 = new STATMENT(JJTSTATMENT);
                                                                                                  boolean jjtc003 = true;
                                                                                                  jjtree.openNodeScope(jjtn003);
      try {
                                                                                                  jjtree.closeNodeScope(jjtn003, true);
                                                                                                  jjtc003 = false;
                                                                                                 jjtn003.value = t.image;
      } finally {
                                                                                                  if (jjtc003) {
                                                                                                    jjtree.closeNodeScope(jjtn003, true);
                                                                                                  }
      }
      break;
    case WHILE:
      t = jj_consume_token(WHILE);
      condition();
      jj_consume_token(BEGIN);
      statement_block();
      jj_consume_token(END);
                                                              STATMENT jjtn004 = new STATMENT(JJTSTATMENT);
                                                              boolean jjtc004 = true;
                                                              jjtree.openNodeScope(jjtn004);
      try {
                                                              jjtree.closeNodeScope(jjtn004, true);
                                                              jjtc004 = false;
                                                             jjtn004.value = t.image;
      } finally {
                                                              if (jjtc004) {
                                                                jjtree.closeNodeScope(jjtn004, true);
                                                              }
      }
      break;
    case SKP:
      jj_consume_token(SKP);
      jj_consume_token(SEMIC);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void expression() throws ParseException {
    fragment();
    expressionPrime();
  }

  static final public void expressionPrime() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      binary_arith_op();
      expression();
      expressionPrime();
      break;
    default:
      jj_la1[10] = jj_gen;

    }
  }

  static final public void fragment() throws ParseException {
                   Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      t = jj_consume_token(ID);
                FRETURN jjtn001 = new FRETURN(JJTFRETURN);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          jj_consume_token(LPAREN);
          arg_list();
          jj_consume_token(RPAREN);
          break;
        default:
          jj_la1[11] = jj_gen;

        }
                                  jjtree.closeNodeScope(jjtn001, true);
                                  jjtc001 = false;
                                 jjtn001.value = t.image;
      } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte001;}
                }
                if (jjte001 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte001;}
                }
                {if (true) throw (Error)jjte001;}
      } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001, true);
                }
      }
      break;
    case MINUS:
      t = jj_consume_token(MINUS);
      Identifier();
                                  MINUSOP jjtn002 = new MINUSOP(JJTMINUSOP);
                                  boolean jjtc002 = true;
                                  jjtree.openNodeScope(jjtn002);
      try {
                                  jjtree.closeNodeScope(jjtn002, true);
                                  jjtc002 = false;
                                 jjtn002.value = t.image;
      } finally {
                                  if (jjtc002) {
                                    jjtree.closeNodeScope(jjtn002, true);
                                  }
      }
      break;
    case NUMBER:
      t = jj_consume_token(NUMBER);
                                  NUMBER jjtn003 = new NUMBER(JJTNUMBER);
                                  boolean jjtc003 = true;
                                  jjtree.openNodeScope(jjtn003);
      try {
                                  jjtree.closeNodeScope(jjtn003, true);
                                  jjtc003 = false;
                                 jjtn003.value = t.image;
      } finally {
                                  if (jjtc003) {
                                    jjtree.closeNodeScope(jjtn003, true);
                                  }
      }
      break;
    case TRUE:
      t = jj_consume_token(TRUE);
                                  TRUEOP jjtn004 = new TRUEOP(JJTTRUEOP);
                                  boolean jjtc004 = true;
                                  jjtree.openNodeScope(jjtn004);
      try {
                                  jjtree.closeNodeScope(jjtn004, true);
                                  jjtc004 = false;
                                 jjtn004.value = t.image;
      } finally {
                                  if (jjtc004) {
                                    jjtree.closeNodeScope(jjtn004, true);
                                  }
      }
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
                                  FALSEOP jjtn005 = new FALSEOP(JJTFALSEOP);
                                  boolean jjtc005 = true;
                                  jjtree.openNodeScope(jjtn005);
      try {
                                  jjtree.closeNodeScope(jjtn005, true);
                                  jjtc005 = false;
                                 jjtn005.value = t.image;
      } finally {
                                  if (jjtc005) {
                                    jjtree.closeNodeScope(jjtn005, true);
                                  }
      }
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void binary_arith_op() throws ParseException {
                          Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      t = jj_consume_token(PLUS);
                 PLUSOP jjtn001 = new PLUSOP(JJTPLUSOP);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
      try {
                 jjtree.closeNodeScope(jjtn001, true);
                 jjtc001 = false;
                jjtn001.value = t.image;
      } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001, true);
                 }
      }
      break;
    case MINUS:
      t = jj_consume_token(MINUS);
                  MINOP jjtn002 = new MINOP(JJTMINOP);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
      try {
                  jjtree.closeNodeScope(jjtn002, true);
                  jjtc002 = false;
                 jjtn002.value = t.image;
      } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                  }
      }
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void condition() throws ParseException {
    if (jj_2_1(2147483647)) {
      comparison();
      conditionPrime();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEGATE:
        jj_consume_token(NEGATE);
               NEGATE jjtn001 = new NEGATE(JJTNEGATE);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
        try {
          condition();
        } catch (Throwable jjte001) {
               if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte001;}
               }
               if (jjte001 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte001;}
               }
               {if (true) throw (Error)jjte001;}
        } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001,  1);
               }
        }
        conditionPrime();
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        condition();
        jj_consume_token(RPAREN);
        conditionPrime();
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void comparison() throws ParseException {
                                 /*@bgen(jjtree) COMPARISON */
  COMPARISON jjtn000 = new COMPARISON(JJTCOMPARISON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      expression();
      comp_op();
      expression();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void conditionPrime() throws ParseException {
                         Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
      t = jj_consume_token(OR);
      condition();
                              ORCOND jjtn001 = new ORCOND(JJTORCOND);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
      try {
                              jjtree.closeNodeScope(jjtn001,  2);
                              jjtc001 = false;
                             jjtn001.value = t.image;
      } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001,  2);
                              }
      }
      break;
    case AND:
      t = jj_consume_token(AND);
      condition();
                              ANDCOND jjtn002 = new ANDCOND(JJTANDCOND);
                              boolean jjtc002 = true;
                              jjtree.openNodeScope(jjtn002);
      try {
                              jjtree.closeNodeScope(jjtn002,  2);
                              jjtc002 = false;
                             jjtn002.value = t.image;
      } finally {
                              if (jjtc002) {
                                jjtree.closeNodeScope(jjtn002,  2);
                              }
      }
      break;
    default:
      jj_la1[15] = jj_gen;

    }
  }

  static final public void comp_op() throws ParseException {
                  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      t = jj_consume_token(EQ);
                      EQComp jjtn001 = new EQComp(JJTEQCOMP);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
      try {
                      jjtree.closeNodeScope(jjtn001, true);
                      jjtc001 = false;
                     jjtn001.value = t.image;
      } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001, true);
                      }
      }
      break;
    case NOT_EQ:
      t = jj_consume_token(NOT_EQ);
                      NOTEQComp jjtn002 = new NOTEQComp(JJTNOTEQCOMP);
                      boolean jjtc002 = true;
                      jjtree.openNodeScope(jjtn002);
      try {
                      jjtree.closeNodeScope(jjtn002, true);
                      jjtc002 = false;
                     jjtn002.value = t.image;
      } finally {
                      if (jjtc002) {
                        jjtree.closeNodeScope(jjtn002, true);
                      }
      }
      break;
    case LT:
      t = jj_consume_token(LT);
                      LTComp jjtn003 = new LTComp(JJTLTCOMP);
                      boolean jjtc003 = true;
                      jjtree.openNodeScope(jjtn003);
      try {
                      jjtree.closeNodeScope(jjtn003, true);
                      jjtc003 = false;
                     jjtn003.value = t.image;
      } finally {
                      if (jjtc003) {
                        jjtree.closeNodeScope(jjtn003, true);
                      }
      }
      break;
    case LT_EQ:
      t = jj_consume_token(LT_EQ);
                      LTEQComp jjtn004 = new LTEQComp(JJTLTEQCOMP);
                      boolean jjtc004 = true;
                      jjtree.openNodeScope(jjtn004);
      try {
                      jjtree.closeNodeScope(jjtn004, true);
                      jjtc004 = false;
                     jjtn004.value = t.image;
      } finally {
                      if (jjtc004) {
                        jjtree.closeNodeScope(jjtn004, true);
                      }
      }
      break;
    case GT:
      t = jj_consume_token(GT);
                      GTComp jjtn005 = new GTComp(JJTGTCOMP);
                      boolean jjtc005 = true;
                      jjtree.openNodeScope(jjtn005);
      try {
                      jjtree.closeNodeScope(jjtn005, true);
                      jjtc005 = false;
                     jjtn005.value = t.image;
      } finally {
                      if (jjtc005) {
                        jjtree.closeNodeScope(jjtn005, true);
                      }
      }
      break;
    case GT_EQ:
      t = jj_consume_token(GT_EQ);
                      GTEQComp jjtn006 = new GTEQComp(JJTGTEQCOMP);
                      boolean jjtc006 = true;
                      jjtree.openNodeScope(jjtn006);
      try {
                      jjtree.closeNodeScope(jjtn006, true);
                      jjtc006 = false;
                     jjtn006.value = t.image;
      } finally {
                      if (jjtc006) {
                        jjtree.closeNodeScope(jjtn006, true);
                      }
      }
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void arg_list() throws ParseException {
                          /*@bgen(jjtree) ARGLST */
  ARGLST jjtn000 = new ARGLST(JJTARGLST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        nemp_arg_list();
        break;
      default:
        jj_la1[17] = jj_gen;
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;

      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void nemp_arg_list() throws ParseException {
    Identifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      nemp_arg_list();
      break;
    default:
      jj_la1[18] = jj_gen;

    }
  }

  static final public String Identifier() throws ParseException {
                              /*@bgen(jjtree) IDENT */
                              IDENT jjtn000 = new IDENT(JJTIDENT);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ID);
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
              jjtn000.value = t.image; {if (true) return t.image;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    return false;
  }

  static private boolean jj_3R_29() {
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_3R_20()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    return false;
  }

  static private boolean jj_3R_17() {
    return false;
  }

  static private boolean jj_3R_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    }
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_21()) return true;
    if (jj_3R_1()) return true;
    if (jj_3R_4()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    return false;
  }

  static private boolean jj_3R_1() {
    if (jj_3R_3()) return true;
    if (jj_3R_4()) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_scan_token(GT_EQ)) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_scan_token(LT_EQ)) return true;
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  static private boolean jj_3R_6() {
    if (jj_scan_token(NOT_EQ)) return true;
    return false;
  }

  static private boolean jj_3R_5() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  static private boolean jj_3R_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_5()) {
    jj_scanpos = xsp;
    if (jj_3R_6()) {
    jj_scanpos = xsp;
    if (jj_3R_7()) {
    jj_scanpos = xsp;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_1()) return true;
    if (jj_3R_2()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CALParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1800,0x1800,0x1c000,0x300000,0x1c000,0x0,0x8000000,0x4c40000,0xc0000000,0x4c40000,0x0,0x80000000,0x300000,0x0,0x80000000,0x0,0x0,0x0,0x8000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x3004,0x0,0x2000,0x0,0x2000,0x0,0x2000,0x6,0x0,0x3004,0x6,0x8,0x30,0xfc0,0x2000,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[1];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public CALParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CALParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CALParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public CALParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CALParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public CALParser(CALParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CALParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[49];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 19; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 49; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
