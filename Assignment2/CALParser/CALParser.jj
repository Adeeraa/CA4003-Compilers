/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. CALParser.jj */
/*@egen*//*******************************
 ***** SECTION 1 - OPTIONS *****
 *******************************/

options {
    IGNORE_CASE = true;
                 
                   
                             
                     
} 

/*********************************
 ***** SECTION 2 - USER CODE *****
 *********************************/
 
PARSER_BEGIN(CALParser)

import java.util.*;
import java.io.*;

public class CALParser/*@bgen(jjtree)*/implements CALParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTCALParserState jjtree = new JJTCALParserState();

/*@egen*/

    public static STC ST = new STC();
    public static String scope = "global";

    public static void main(String[] args) {
    

        CALParser parser;
        if (args.length == 0) {
            System.out.println("Reading from standard input...");
            parser = new CALParser(System.in);
        } else if (args.length == 1) {
            try {
                parser = new CALParser(new java.io.FileInputStream(args[0])); 
            } catch (java.io.FileNotFoundException e) {
                System.err.println("File " + args[0] + " not found.");
                
                return;
            }
        } else {
            System.out.println("CAL Parser: Usage is one of:");
            System.out.println("    java CALParser < inputfile");
            System.out.println("OR");
            System.out.println("    java CALParser inputfile");
            
            return;
        }

    try {
        //AST
        System.out.println("***ABSTRACT SYSTAX TREE***");
        SimpleNode root = parser.program();
        root.dump("");
        System.out.println("**************************");
        System.out.println();
        
        //SYMBOL TABLE
        System.out.println("******SYMBOL TABLE********");
        ST.printTable();
        System.out.println("**************************");
        System.out.println();
         
        //SEMANTIC ANALYSIS
         
        //3 ADDRESS CODE
        

    } catch (ParseException e) {
        System.out.println(e.getMessage());
        System.out.println("CAL Parser: Encountered errors during the parse.");
    }

    }
}

PARSER_END(CALParser)

/*****************************************
 ***** SECTION 3 - TOKEN DEFINITIONS *****
 *****************************************/

TOKEN_MGR_DECLS : /* DECLARE NESTING VAR */ 
{
    static int commentNesting = 0;
}

SKIP : /*** Ignoring spaces/tabs/newlines ***/
{
    " "
  | "\t"
  | "\n" 
  | "\r" 
  | "\f" 
}

SKIP : /* SINGLE-LINE COMMENT */
{
    <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
}

SKIP : /* MULTI-LINE COMMENTS */
{
    "/*" { commentNesting++; } : IN_COMMENT
}

<IN_COMMENT> SKIP :
{
    "/*" { commentNesting++; }
  | "*/" { commentNesting--; if (commentNesting == 0) { SwitchTo(DEFAULT); }} 
  | <~[]> 
}

TOKEN : /* KEYWORDS */
{
    < VAR : "variable" >
  | < CONST : "constant" >
  | < RETURN : "return" >
  | < INT : "integer" >
  | < BOOL : "boolean" >
  | < VOID : "void" >
  | < MAIN : "main" >
  | < IF : "if" >
  | < ELSE : "else" >
  | < TRUE : "true" >
  | < FALSE : "false" >
  | < WHILE : "while" >
  | < BEGIN : "begin" >
  | < END : "end" >
  | < IS : "is" >
  | < SKP : "skip" >
}

TOKEN : /* PUNCTUATION */
{
    < COMMA : "," >
  | < SEMIC : ";" >
  | < COLON : ":" >
  | < ASSIGN : ":=" >
  | < LPAREN : "(" >
  | < RPAREN : ")" >
  | < PLUS : "+" >
  | < MINUS : "-" >
  | < NEGATE : "~" >
  | < OR : "|" >
  | < AND : "&" >
  | < EQ : "=" >
  | < NOT_EQ : "!=" >
  | < LT : "<" >
  | < LT_EQ : "<=" >
  | < GT : ">" >
  | < GT_EQ : ">=" >
}

TOKEN : /* Numbers and identifiers */
{
    < NUMBER : "0" | ((<MINUS>)? ["1" - "9"] (<DIGIT>)*) >
  | < ID : <LETTER> (<LETTER> | <DIGIT> | "_")* >
  | < #DIGIT : ["0" - "9"] >
  | < #LETTER : ["a" - "z", "A" - "Z"] >
}

TOKEN : /* Anything not recognised so far */
{
    < OTHER : ~[] >
}

/***********************************
 ***** SECTION 4 - THE GRAMMAR *****
 ***********************************/
 
//my code

SimpleNode program()      : {/*@bgen(jjtree) PROG */
  PROG jjtn000 = new PROG(JJTPROG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) PROG */
    try {
/*@egen*/
    decl_list() function_list() main() 
    
    <EOF>/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void decl_list() : {} {
    (decl() <SEMIC> decl_list()
  | {})
}

void decl() : {} {
    var_decl() 
  | const_decl()
}

void var_decl()          : {/*@bgen(jjtree) VARDECL */
                            VARDECL jjtn000 = new VARDECL(JJTVARDECL);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; String id; String type;} {/*@bgen(jjtree) VARDECL */
    try {
/*@egen*/
    t = <VAR> id = Identifier() <COLON> type = type()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ 
    
    {
        jjtn000.value = t.image;
        ST.add(id, type, "var", scope);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void const_decl()           : {/*@bgen(jjtree) CONSTDECL */
                               CONSTDECL jjtn000 = new CONSTDECL(JJTCONSTDECL);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; String id; String type;} {/*@bgen(jjtree) CONSTDECL */
    try {
/*@egen*/
    t = <CONST> id = Identifier() <COLON> type = type() <ASSIGN> expression()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    
    {   
        jjtn000.value = t.image;
        ST.add(id, type, "const", scope);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void function_list() : {} {
    (function() function_list()
  | {})
}

void function()          : {/*@bgen(jjtree) FUNCTION */
                            FUNCTION jjtn000 = new FUNCTION(JJTFUNCTION);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; String type; String id;} {/*@bgen(jjtree) FUNCTION */
    try {
/*@egen*/
    type = type() id = Identifier() {ST.add(id, type, "func", scope); scope = id;} <LPAREN> parameter_list() <RPAREN> <IS> 
    decl_list()
    <BEGIN>
    statement_block()
    <RETURN> <LPAREN> (expression() | {}) <RPAREN>/*@bgen(jjtree) RETURN */
                                                   {
                                                     RETURN jjtn001 = new RETURN(JJTRETURN);
                                                     boolean jjtc001 = true;
                                                     jjtree.openNodeScope(jjtn001);
                                                   }
                                                   try {
/*@egen*/ <SEMIC>/*@bgen(jjtree)*/
                                                   } finally {
                                                     if (jjtc001) {
                                                       jjtree.closeNodeScope(jjtn001, true);
                                                     }
                                                   }
/*@egen*/        
    <END>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String type()       : {/*@bgen(jjtree) TYPE */
                       TYPE jjtn000 = new TYPE(JJTTYPE);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) TYPE */
    try {
/*@egen*/
    t = <INT>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/   {jjtn000.value = t.image; return t.image;}
  | t = <BOOL>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/  {jjtn000.value = t.image; return t.image;}
  | t = <VOID>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/  {jjtn000.value = t.image; return t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void parameter_list() : {} {
    nemp_parameter_list() 
  | {}
}

void nemp_parameter_list()        : {/*@bgen(jjtree) PARAM */
                                     PARAM jjtn000 = new PARAM(JJTPARAM);
                                     boolean jjtc000 = true;
                                     jjtree.openNodeScope(jjtn000);
/*@egen*/String id; String type;} {/*@bgen(jjtree) PARAM */
    try {
/*@egen*/
    id = Identifier() <COLON> type = type() (<COMMA> nemp_parameter_list() 
  | {})/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
  
    {
        ST.add(id, type, "param", scope);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void main()       : {/*@bgen(jjtree) MAIN */
                     MAIN jjtn000 = new MAIN(JJTMAIN);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) MAIN */
    try {
/*@egen*/
    {scope = "main";} t = <MAIN> <BEGIN> decl_list() statement_block() <END>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void statement_block() : {} {
    (statement() statement_block()) 
  | {}
}

void statement() : {Token t;} {
    Identifier() ( t = <ASSIGN> expression() <SEMIC>/*@bgen(jjtree) ASSIGN */
                                                     {
                                                       ASSIGN jjtn001 = new ASSIGN(JJTASSIGN);
                                                       boolean jjtc001 = true;
                                                       jjtree.openNodeScope(jjtn001);
                                                     }
                                                     try {
/*@egen*//*@bgen(jjtree)*/
                                                     {
                                                       jjtree.closeNodeScope(jjtn001, true);
                                                       jjtc001 = false;
                                                     }
/*@egen*/ {jjtn001.value = t.image;}/*@bgen(jjtree)*/
                                                     } finally {
                                                       if (jjtc001) {
                                                         jjtree.closeNodeScope(jjtn001, true);
                                                       }
                                                     }
/*@egen*/        
                 | t = <LPAREN> arg_list() <RPAREN> <SEMIC>/*@bgen(jjtree) ASSIGN */
                                                            {
                                                              ASSIGN jjtn002 = new ASSIGN(JJTASSIGN);
                                                              boolean jjtc002 = true;
                                                              jjtree.openNodeScope(jjtn002);
                                                            }
                                                            try {
/*@egen*//*@bgen(jjtree)*/
                                                            {
                                                              jjtree.closeNodeScope(jjtn002, true);
                                                              jjtc002 = false;
                                                            }
/*@egen*/ {jjtn002.value = t.image;}/*@bgen(jjtree)*/
                                                            } finally {
                                                              if (jjtc002) {
                                                                jjtree.closeNodeScope(jjtn002, true);
                                                              }
                                                            }
/*@egen*/        )
  | <BEGIN>  statement_block() <END>
  | t = <IF> condition() <BEGIN> statement_block() <END> <ELSE> <BEGIN> statement_block() <END>/*@bgen(jjtree) STATMENT */
                                                                                                {
                                                                                                  STATMENT jjtn003 = new STATMENT(JJTSTATMENT);
                                                                                                  boolean jjtc003 = true;
                                                                                                  jjtree.openNodeScope(jjtn003);
                                                                                                }
                                                                                                try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                {
                                                                                                  jjtree.closeNodeScope(jjtn003, true);
                                                                                                  jjtc003 = false;
                                                                                                }
/*@egen*/ {jjtn003.value = t.image;}/*@bgen(jjtree)*/
                                                                                                } finally {
                                                                                                  if (jjtc003) {
                                                                                                    jjtree.closeNodeScope(jjtn003, true);
                                                                                                  }
                                                                                                }
/*@egen*/          
  | t = <WHILE> condition() <BEGIN> statement_block() <END>/*@bgen(jjtree) STATMENT */
                                                            {
                                                              STATMENT jjtn004 = new STATMENT(JJTSTATMENT);
                                                              boolean jjtc004 = true;
                                                              jjtree.openNodeScope(jjtn004);
                                                            }
                                                            try {
/*@egen*//*@bgen(jjtree)*/
                                                            {
                                                              jjtree.closeNodeScope(jjtn004, true);
                                                              jjtc004 = false;
                                                            }
/*@egen*/ {jjtn004.value = t.image;}/*@bgen(jjtree)*/
                                                            } finally {
                                                              if (jjtc004) {
                                                                jjtree.closeNodeScope(jjtn004, true);
                                                              }
                                                            }
/*@egen*/          
  | <SKP> <SEMIC>
}

void expression() : {} {
    fragment() expressionPrime()
}

void expressionPrime(): {} {
    binary_arith_op() expression() expressionPrime() 
  | {}
}

void fragment() : {Token t;} {
     t = <ID>/*@bgen(jjtree) FRETURN */
              {
                FRETURN jjtn001 = new FRETURN(JJTFRETURN);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
              }
              try {
/*@egen*/ ((<LPAREN> arg_list() <RPAREN> 
                    | {})/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn001, true);
                                  jjtc001 = false;
                                }
/*@egen*/       {jjtn001.value = t.image; })/*@bgen(jjtree)*/
              } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  throw (RuntimeException)jjte001;
                }
                if (jjte001 instanceof ParseException) {
                  throw (ParseException)jjte001;
                }
                throw (Error)jjte001;
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001, true);
                }
              }
/*@egen*/         
  | t = <MINUS> Identifier()/*@bgen(jjtree) MINUSOP */
                                {
                                  MINUSOP jjtn002 = new MINUSOP(JJTMINUSOP);
                                  boolean jjtc002 = true;
                                  jjtree.openNodeScope(jjtn002);
                                }
                                try {
/*@egen*//*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn002, true);
                                  jjtc002 = false;
                                }
/*@egen*/    {jjtn002.value = t.image; }/*@bgen(jjtree)*/
                                } finally {
                                  if (jjtc002) {
                                    jjtree.closeNodeScope(jjtn002, true);
                                  }
                                }
/*@egen*/         
  | t = <NUMBER>/*@bgen(jjtree) NUMBER */
                                {
                                  NUMBER jjtn003 = new NUMBER(JJTNUMBER);
                                  boolean jjtc003 = true;
                                  jjtree.openNodeScope(jjtn003);
                                }
                                try {
/*@egen*//*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn003, true);
                                  jjtc003 = false;
                                }
/*@egen*/                {jjtn003.value = t.image; }/*@bgen(jjtree)*/
                                } finally {
                                  if (jjtc003) {
                                    jjtree.closeNodeScope(jjtn003, true);
                                  }
                                }
/*@egen*/        
  | t = <TRUE>/*@bgen(jjtree) TRUEOP */
                                {
                                  TRUEOP jjtn004 = new TRUEOP(JJTTRUEOP);
                                  boolean jjtc004 = true;
                                  jjtree.openNodeScope(jjtn004);
                                }
                                try {
/*@egen*//*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn004, true);
                                  jjtc004 = false;
                                }
/*@egen*/                  {jjtn004.value = t.image; }/*@bgen(jjtree)*/
                                } finally {
                                  if (jjtc004) {
                                    jjtree.closeNodeScope(jjtn004, true);
                                  }
                                }
/*@egen*/        
  | t = <FALSE>/*@bgen(jjtree) FALSEOP */
                                {
                                  FALSEOP jjtn005 = new FALSEOP(JJTFALSEOP);
                                  boolean jjtc005 = true;
                                  jjtree.openNodeScope(jjtn005);
                                }
                                try {
/*@egen*//*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn005, true);
                                  jjtc005 = false;
                                }
/*@egen*/                 {jjtn005.value = t.image; }/*@bgen(jjtree)*/
                                } finally {
                                  if (jjtc005) {
                                    jjtree.closeNodeScope(jjtn005, true);
                                  }
                                }
/*@egen*/         
}

void binary_arith_op() : {Token t;} {
    t = <PLUS>/*@bgen(jjtree) PLUSOP */
               {
                 PLUSOP jjtn001 = new PLUSOP(JJTPLUSOP);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
               }
               try {
/*@egen*//*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn001, true);
                 jjtc001 = false;
               }
/*@egen*/ {jjtn001.value = t.image;}/*@bgen(jjtree)*/
               } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001, true);
                 }
               }
/*@egen*/        
  | t = <MINUS>/*@bgen(jjtree) MINOP */
                {
                  MINOP jjtn002 = new MINOP(JJTMINOP);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                }
                try {
/*@egen*//*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn002, true);
                  jjtc002 = false;
                }
/*@egen*/ {jjtn002.value = t.image;}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                  }
                }
/*@egen*/       
}

void condition() : {} {
    LOOKAHEAD(expression() comp_op()) comparison() conditionPrime()
  | <NEGATE>/*@bgen(jjtree) #NEGATE( 1) */
             {
               NEGATE jjtn001 = new NEGATE(JJTNEGATE);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
             }
             try {
/*@egen*/ condition()/*@bgen(jjtree)*/
             } catch (Throwable jjte001) {
               if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 throw (RuntimeException)jjte001;
               }
               if (jjte001 instanceof ParseException) {
                 throw (ParseException)jjte001;
               }
               throw (Error)jjte001;
             } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001,  1);
               }
             }
/*@egen*/             conditionPrime()
  | <LPAREN> condition() <RPAREN> conditionPrime()
}

void comparison()             : {/*@bgen(jjtree) COMPARISON */
  COMPARISON jjtn000 = new COMPARISON(JJTCOMPARISON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) COMPARISON */
    try {
/*@egen*/  
    expression() comp_op() expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
}

void conditionPrime() : {Token t;} {
    t = <OR> condition()/*@bgen(jjtree) #ORCOND( 2) */
                            {
                              ORCOND jjtn001 = new ORCOND(JJTORCOND);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
                            }
                            try {
/*@egen*//*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn001,  2);
                              jjtc001 = false;
                            }
/*@egen*/    {jjtn001.value = t.image;}/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001,  2);
                              }
                            }
/*@egen*/           
  | t = <AND> condition()/*@bgen(jjtree) #ANDCOND( 2) */
                            {
                              ANDCOND jjtn002 = new ANDCOND(JJTANDCOND);
                              boolean jjtc002 = true;
                              jjtree.openNodeScope(jjtn002);
                            }
                            try {
/*@egen*//*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn002,  2);
                              jjtc002 = false;
                            }
/*@egen*/   {jjtn002.value = t.image;}/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc002) {
                                jjtree.closeNodeScope(jjtn002,  2);
                              }
                            }
/*@egen*/            
  | {}
}

void comp_op() : {Token t;} {
    t = <EQ>/*@bgen(jjtree) EQComp */
                    {
                      EQComp jjtn001 = new EQComp(JJTEQCOMP);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
                    }
                    try {
/*@egen*//*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn001, true);
                      jjtc001 = false;
                    }
/*@egen*/        {jjtn001.value = t.image;}/*@bgen(jjtree)*/
                    } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001, true);
                      }
                    }
/*@egen*/        
  | t = <NOT_EQ>/*@bgen(jjtree) NOTEQComp */
                    {
                      NOTEQComp jjtn002 = new NOTEQComp(JJTNOTEQCOMP);
                      boolean jjtc002 = true;
                      jjtree.openNodeScope(jjtn002);
                    }
                    try {
/*@egen*//*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn002, true);
                      jjtc002 = false;
                    }
/*@egen*/    {jjtn002.value = t.image;}/*@bgen(jjtree)*/
                    } finally {
                      if (jjtc002) {
                        jjtree.closeNodeScope(jjtn002, true);
                      }
                    }
/*@egen*/           
  | t = <LT>/*@bgen(jjtree) LTComp */
                    {
                      LTComp jjtn003 = new LTComp(JJTLTCOMP);
                      boolean jjtc003 = true;
                      jjtree.openNodeScope(jjtn003);
                    }
                    try {
/*@egen*//*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn003, true);
                      jjtc003 = false;
                    }
/*@egen*/        {jjtn003.value = t.image;}/*@bgen(jjtree)*/
                    } finally {
                      if (jjtc003) {
                        jjtree.closeNodeScope(jjtn003, true);
                      }
                    }
/*@egen*/        
  | t = <LT_EQ>/*@bgen(jjtree) LTEQComp */
                    {
                      LTEQComp jjtn004 = new LTEQComp(JJTLTEQCOMP);
                      boolean jjtc004 = true;
                      jjtree.openNodeScope(jjtn004);
                    }
                    try {
/*@egen*//*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn004, true);
                      jjtc004 = false;
                    }
/*@egen*/     {jjtn004.value = t.image;}/*@bgen(jjtree)*/
                    } finally {
                      if (jjtc004) {
                        jjtree.closeNodeScope(jjtn004, true);
                      }
                    }
/*@egen*/          
  | t = <GT>/*@bgen(jjtree) GTComp */
                    {
                      GTComp jjtn005 = new GTComp(JJTGTCOMP);
                      boolean jjtc005 = true;
                      jjtree.openNodeScope(jjtn005);
                    }
                    try {
/*@egen*//*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn005, true);
                      jjtc005 = false;
                    }
/*@egen*/        {jjtn005.value = t.image;}/*@bgen(jjtree)*/
                    } finally {
                      if (jjtc005) {
                        jjtree.closeNodeScope(jjtn005, true);
                      }
                    }
/*@egen*/        
  | t = <GT_EQ>/*@bgen(jjtree) GTEQComp */
                    {
                      GTEQComp jjtn006 = new GTEQComp(JJTGTEQCOMP);
                      boolean jjtc006 = true;
                      jjtree.openNodeScope(jjtn006);
                    }
                    try {
/*@egen*//*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn006, true);
                      jjtc006 = false;
                    }
/*@egen*/     {jjtn006.value = t.image;}/*@bgen(jjtree)*/
                    } finally {
                      if (jjtc006) {
                        jjtree.closeNodeScope(jjtn006, true);
                      }
                    }
/*@egen*/          
}

void arg_list()        : {/*@bgen(jjtree) ARGLST */
  ARGLST jjtn000 = new ARGLST(JJTARGLST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) ARGLST */
    try {
/*@egen*/
    nemp_arg_list()
  |/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ {}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void nemp_arg_list() : {} {
    Identifier() (<COMMA> nemp_arg_list()
  | {})
}

String Identifier()        : {/*@bgen(jjtree) IDENT */
                              IDENT jjtn000 = new IDENT(JJTIDENT);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) IDENT */
    try {
/*@egen*/
    t = <ID>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {jjtn000.value = t.image; return t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

